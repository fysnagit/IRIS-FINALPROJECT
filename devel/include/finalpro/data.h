// Generated by gencpp from file finalpro/data.msg
// DO NOT EDIT!


#ifndef FINALPRO_MESSAGE_DATA_H
#define FINALPRO_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace finalpro
{
template <class ContainerAllocator>
struct data_
{
  typedef data_<ContainerAllocator> Type;

  data_()
    : centerx(0)
    , centery(0)  {
    }
  data_(const ContainerAllocator& _alloc)
    : centerx(0)
    , centery(0)  {
  (void)_alloc;
    }



   typedef int16_t _centerx_type;
  _centerx_type centerx;

   typedef int16_t _centery_type;
  _centery_type centery;





  typedef boost::shared_ptr< ::finalpro::data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::finalpro::data_<ContainerAllocator> const> ConstPtr;

}; // struct data_

typedef ::finalpro::data_<std::allocator<void> > data;

typedef boost::shared_ptr< ::finalpro::data > dataPtr;
typedef boost::shared_ptr< ::finalpro::data const> dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::finalpro::data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::finalpro::data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::finalpro::data_<ContainerAllocator1> & lhs, const ::finalpro::data_<ContainerAllocator2> & rhs)
{
  return lhs.centerx == rhs.centerx &&
    lhs.centery == rhs.centery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::finalpro::data_<ContainerAllocator1> & lhs, const ::finalpro::data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace finalpro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::finalpro::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::finalpro::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finalpro::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finalpro::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finalpro::data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finalpro::data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::finalpro::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "470a37c8695ec4f9019a304d43b6f6d3";
  }

  static const char* value(const ::finalpro::data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x470a37c8695ec4f9ULL;
  static const uint64_t static_value2 = 0x019a304d43b6f6d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::finalpro::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "finalpro/data";
  }

  static const char* value(const ::finalpro::data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::finalpro::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 centerx\n"
"int16 centery\n"
;
  }

  static const char* value(const ::finalpro::data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::finalpro::data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerx);
      stream.next(m.centery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::finalpro::data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::finalpro::data_<ContainerAllocator>& v)
  {
    s << indent << "centerx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.centerx);
    s << indent << "centery: ";
    Printer<int16_t>::stream(s, indent + "  ", v.centery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINALPRO_MESSAGE_DATA_H
