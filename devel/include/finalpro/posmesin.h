// Generated by gencpp from file finalpro/posmesin.msg
// DO NOT EDIT!


#ifndef FINALPRO_MESSAGE_POSMESIN_H
#define FINALPRO_MESSAGE_POSMESIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace finalpro
{
template <class ContainerAllocator>
struct posmesin_
{
  typedef posmesin_<ContainerAllocator> Type;

  posmesin_()
    : posx(0)
    , posy(0)
    , sudut(0)  {
    }
  posmesin_(const ContainerAllocator& _alloc)
    : posx(0)
    , posy(0)
    , sudut(0)  {
  (void)_alloc;
    }



   typedef int16_t _posx_type;
  _posx_type posx;

   typedef int16_t _posy_type;
  _posy_type posy;

   typedef int16_t _sudut_type;
  _sudut_type sudut;





  typedef boost::shared_ptr< ::finalpro::posmesin_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::finalpro::posmesin_<ContainerAllocator> const> ConstPtr;

}; // struct posmesin_

typedef ::finalpro::posmesin_<std::allocator<void> > posmesin;

typedef boost::shared_ptr< ::finalpro::posmesin > posmesinPtr;
typedef boost::shared_ptr< ::finalpro::posmesin const> posmesinConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::finalpro::posmesin_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::finalpro::posmesin_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::finalpro::posmesin_<ContainerAllocator1> & lhs, const ::finalpro::posmesin_<ContainerAllocator2> & rhs)
{
  return lhs.posx == rhs.posx &&
    lhs.posy == rhs.posy &&
    lhs.sudut == rhs.sudut;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::finalpro::posmesin_<ContainerAllocator1> & lhs, const ::finalpro::posmesin_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace finalpro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::finalpro::posmesin_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::finalpro::posmesin_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finalpro::posmesin_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::finalpro::posmesin_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finalpro::posmesin_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::finalpro::posmesin_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::finalpro::posmesin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a909f0056339fefb2929ec987b0893ef";
  }

  static const char* value(const ::finalpro::posmesin_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa909f0056339fefbULL;
  static const uint64_t static_value2 = 0x2929ec987b0893efULL;
};

template<class ContainerAllocator>
struct DataType< ::finalpro::posmesin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "finalpro/posmesin";
  }

  static const char* value(const ::finalpro::posmesin_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::finalpro::posmesin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 posx\n"
"int16 posy\n"
"int16 sudut\n"
;
  }

  static const char* value(const ::finalpro::posmesin_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::finalpro::posmesin_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.sudut);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct posmesin_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::finalpro::posmesin_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::finalpro::posmesin_<ContainerAllocator>& v)
  {
    s << indent << "posx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.posy);
    s << indent << "sudut: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sudut);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINALPRO_MESSAGE_POSMESIN_H
